buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.google.gms:google-services:4.3.3'
    }
}

repositories {
    google()
    jcenter()
}

ext {
    bintrayRepo = 'Maven'
    bintrayName = 'CleverTapAndroidSDK'
    org = 'clevertap'

    publishedGroupId = 'com.clevertap.android'
    libraryName = 'CleverTapAndroidSDK'
    artifact = 'clevertap-android-sdk'
    libraryDescription = 'The CleverTap Android SDK'

    siteUrl = 'https://github.com/CleverTap/clevertap-android-sdk'
    gitUrl = 'https://github.com/CleverTap/clevertap-android-sdk.git'

    libraryVersion = '3.8.1x'

    developerId = 'clevertap'
    developerName = 'CleverTap'
    developerEmail = 'support@clevertap.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

version = libraryVersion
group = publishedGroupId

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
    }

    buildTypes {
        debug {
            buildConfigField "String", "SDK_VERSION_STRING", '"!SDK-VERSION-STRING!:com.clevertap.android:clevertap-android-sdk:3.8.1.0"'
        }

        release {
            buildConfigField "String", "SDK_VERSION_STRING", '"!SDK-VERSION-STRING!:com.clevertap.android:clevertap-android-sdk:3.8.1.0"'
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
    //logic for variant based renaming of the aar files
    libraryVariants.all { variant ->
        variant.outputs.all {
            if (variant.getName().toLowerCase().contains('release')) {
                outputFileName = "${artifact}-${libraryVersion}.aar"
            } else if (variant.getName().toLowerCase().contains('debug')) {
                outputFileName = "${artifact}-${variant.name}-${libraryVersion}.aar"
            }
        }
    }
    testOptions{
        unitTests{
            includeAndroidResources = true
        }
    }
}

Properties properties = new Properties()
if (project.rootProject.file('local.properties').exists()){
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}


bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        userOrg = org
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
        }
    }
}

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}
dependencies {
    compileOnly 'com.google.firebase:firebase-messaging:20.2.3'
    compileOnly 'androidx.legacy:legacy-support-v4:1.0.0'
    compileOnly 'com.google.android.exoplayer:exoplayer:2.8.4'
    compileOnly 'com.google.android.exoplayer:exoplayer-hls:2.8.4'
    compileOnly 'com.google.android.exoplayer:exoplayer-ui:2.8.4'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    compileOnly 'com.google.android.material:material:1.1.0'
    compileOnly 'com.github.bumptech.glide:glide:4.9.0'
    implementation 'com.android.installreferrer:installreferrer:2.1'
    // Unit testing dependencies
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.mockito:mockito-core:2.28.2'
    testImplementation 'org.robolectric:robolectric:4.3.1'

    testImplementation 'androidx.test:core:1.2.0'
    testImplementation "androidx.test.ext:junit:1.1.1"

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    testImplementation 'org.powermock:powermock-core:2.0.7'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.7'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.7'

}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}